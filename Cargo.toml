[package]
name = "compile_with_bazel"
version = "0.0.0"

# Mandatory (or Cargo tooling is unhappy)
[lib]
path = "fake_lib.rs"

[dependencies]
console_error_panic_hook = "0.1.7"
nom = "7.1.0"
imbl = "1.0.1"
lazy_static = "1.4.0"
js-sys = "0.3.56"
signals2 = "0.3.2"

[package.metadata.raze]
# The path at which to write output files.
#
# `cargo raze` will generate Bazel-compatible BUILD files into this path.
# This can either be a relative path (e.g. "foo/bar"), relative to this
# Cargo.toml file; or relative to the Bazel workspace root (e.g. "//foo/bar").
workspace_path = "//cargo"

# This causes aliases for dependencies to be rendered in the BUILD
# file located next to this `Cargo.toml` file.
package_aliases_dir = "cargo"

# The set of targets to generate BUILD rules for.
targets = [
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-gnu",
]

# The two acceptable options are "Remote" and "Vendored" which
# is used to indicate whether the user is using a non-vendored or
# vendored set of dependencies.
genmode = "Remote"

# rules_rust defines its own rust_library for wasm-bindgen, so for any
# of our crates that depend on wasm-bindgen we need to have them depend
# on that one otherwise Bazel tries to link in wasm-bindgen twice
# (resulting in duplicate symbol errors etc.)
[package.metadata.raze.crates.console_error_panic_hook.'*']
skipped_deps = [
    "wasm-bindgen-0.2.79"
]
additional_deps = [
    "@rules_rust_wasm_bindgen__wasm_bindgen__0_2_78//:wasm_bindgen",
]

[package.metadata.raze.crates.js-sys.'*']
skipped_deps = [
    "wasm-bindgen-0.2.79"
]
additional_deps = [
    "@rules_rust_wasm_bindgen__wasm_bindgen__0_2_78//:wasm_bindgen",
]

[package.metadata.raze.crates.bumpalo.'3.9.1']
data_attr = "[\"README.md\"]"
